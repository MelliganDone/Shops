import telebot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
BOT_TOKEN = '8157675439:AAEc3KeNuEo_rPdMe1hmIhwi4Kd6eXi2J9Y'  # –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
SHEET_ID = '1idTZnstCFEXQXsiMn5ADl-SvK8z8t1Tojc9lz2wVYFA'     # ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å—Å—ã–ª–∫–∏
WORKSHEET_NAME = 'MERKEZI –ú–ò–†'                                # –õ–∏—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ

# === –°–ø–∏—Å–∫–∏ ===
EMPLOYEES = ["–î–∏–º–∞", "–õ–µ–Ω–∞", "–î–∞—Ä—å—è", "–í–µ—Ä–æ–Ω–∏–∫–∞", "–ê–ª–∏–Ω–∞", "–ù–∏–∫–æ", "–≠–º–∏–ª—å", "–ü–∞–≤–µ–ª"]
CATEGORIES = ["–û–¥–Ω–æ—Ä–∞–∑–∫–∞", "POD-–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–ñ–∏–¥–∫–æ—Å—Ç—å", "–ö–∞—Ä—Ç—Ä–∏–¥–∂", "–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å", "–¢–∞–±–∞–∫", "–ù–∞–ø–∏—Ç–∫–∏", "–£–≥–ª–∏", "–ê–ö–ë"]
PAYMENT_TYPES = ["–¢–µ—Ä–º–∏–Ω–∞–ª", "–ù–∞–ª–∏—á–∫–∞", "–ü–µ—Ä–µ–≤–æ–¥", "–°–ë–ü"]

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π ===
PLAN_CELL = 'K2'
CASH_REGISTER_CELL = 'J2'
DATE_COLUMN = "–î–∞—Ç–∞"
CASH_COLUMN = "–°—É–º–º–∞"
PAYMENT_COLUMN = "–û–ø–ª–∞—Ç–∞"

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
def connect_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SHEET_ID)
    worksheet = sheet.worksheet(WORKSHEET_NAME)
    return worksheet, sheet

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = telebot.TeleBot(BOT_TOKEN)

user_data = {}        # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}      # –•—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ –≤–≤–æ–¥–∞

# === –§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ===
def get_main_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
    btn2 = telebot.types.KeyboardButton("üîÅ –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É")
    btn3 = telebot.types.KeyboardButton("üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è")
    keyboard.row(btn1, btn2)
    keyboard.row(btn3)
    return keyboard

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É—á—ë—Ç–∞ –ø—Ä–æ–¥–∞–∂!\n\n"
        "üìå –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "–ö–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å.\n"
        "3Ô∏è‚É£ –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    bot.send_message(message.chat.id, welcome_text)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω
    keyboard = telebot.types.InlineKeyboardMarkup()
    for name in EMPLOYEES:
        keyboard.add(telebot.types.InlineKeyboardButton(text=name, callback_data=f"name_{name}"))
    bot.send_message(message.chat.id, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("name_"))
def handle_employee_choice(call):
    chat_id = call.message.chat.id
    employee = call.data.replace("name_", "")
    user_data[chat_id] = {"employee": employee}

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤ –∫–∞—Å—Å–µ
    worksheet, _ = connect_sheet()
    cash_value = worksheet.acell(CASH_REGISTER_CELL).value or "0"
    try:
        cash = int(cash_value.replace(" ", "").replace(",", "."))
    except:
        cash = 0
    user_data[chat_id]["cash"] = cash

    bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {employee}")
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {employee}."
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—Å—Å–µ
    bot.send_message(chat_id, f"üíº –í –∫–∞—Å—Å–µ —Å–µ–π—á–∞—Å: {cash} —Ä—É–±.")

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞"
    keyboard = telebot.types.InlineKeyboardMarkup()
    new_sale_btn = telebot.types.InlineKeyboardButton("üÜï –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞", callback_data="new_sale")
    keyboard.add(new_sale_btn)

    bot.send_message(chat_id, "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=get_main_keyboard())
    bot.send_message(chat_id, "üëá –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞" ===
@bot.callback_query_handler(func=lambda call: call.data == "new_sale")
def handle_new_sale_button(call):
    chat_id = call.message.chat.id

    if chat_id not in user_data:
        bot.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    user_states[chat_id] = {
        "step": "category",
        "data": {}
    }

    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    buttons = [telebot.types.InlineKeyboardButton(cat, callback_data=f"cat_{cat}") for cat in CATEGORIES]
    keyboard.add(*buttons)

    bot.send_message(chat_id, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
def handle_category(call):
    chat_id = call.message.chat.id
    category = call.data.replace("cat_", "")
    user_states[chat_id]["data"]["category"] = category
    user_states[chat_id]["step"] = "name"

    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {category}")
    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

# === –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ===
@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "name")
def handle_name(message):
    chat_id = message.chat.id
    name = message.text.strip()
    user_states[chat_id]["data"]["name"] = name
    user_states[chat_id]["step"] = "quantity"

    keyboard = telebot.types.InlineKeyboardMarkup(row_width=4)
    buttons = [telebot.types.InlineKeyboardButton(str(q), callback_data=f"qty_{q}") for q in [1, 2, 5, 10]]
    keyboard.add(*buttons)

    bot.send_message(chat_id, "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("qty_"))
def handle_quantity(call):
    chat_id = call.message.chat.id
    qty = int(call.data.replace("qty_", ""))
    user_states[chat_id]["data"]["quantity"] = qty
    user_states[chat_id]["step"] = "amount"

    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {qty}")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

# === –í–≤–æ–¥ —Å—É–º–º—ã ===
@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "amount")
def handle_amount(message):
    chat_id = message.chat.id
    try:
        amount = int(message.text.strip())
        user_states[chat_id]["data"]["amount"] = amount
        user_states[chat_id]["step"] = "payment"

        keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
        buttons = [telebot.types.InlineKeyboardButton(pay, callback_data=f"pay_{pay}") for pay in PAYMENT_TYPES]
        keyboard.add(*buttons)

        bot.send_message(chat_id, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    except ValueError:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def handle_payment(call):
    chat_id = call.message.chat.id
    payment = call.data.replace("pay_", "")
    user_states[chat_id]["data"]["payment"] = payment
    user_states[chat_id]["step"] = "discount"

    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        telebot.types.InlineKeyboardButton("–î–∞", callback_data="disc_–¥–∞"),
        telebot.types.InlineKeyboardButton("–ù–µ—Ç", callback_data="disc_–Ω–µ—Ç")
    ]
    keyboard.add(*buttons)

    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {payment}")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="üéÅ –ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞?", reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∏–¥–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("disc_"))
def handle_discount(call):
    chat_id = call.message.chat.id
    discount = call.data.replace("disc_", "").capitalize()
    user_states[chat_id]["data"]["discount"] = discount

    data = user_states[chat_id]["data"]
    employee = user_data[chat_id]["employee"]
    time = datetime.now().strftime("%H:%M")
    date = datetime.now().strftime("%Y-%m-%d")

    row = [
        date,
        time,
        employee,
        data["category"],
        data["name"],
        data["quantity"],
        data["amount"],
        data["payment"],
        data["discount"]
    ]

    try:
        worksheet, _ = connect_sheet()
        worksheet.append_row(row)

        # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–∫–æ–π ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞—Å—Å—É
        if data["payment"] == "–ù–∞–ª–∏—á–∫–∞":
            user_data[chat_id]["cash"] += int(data["amount"])
            worksheet.update(CASH_REGISTER_CELL, [[str(user_data[chat_id]["cash"])]])  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        keyboard = telebot.types.InlineKeyboardMarkup()
        new_sale_btn = telebot.types.InlineKeyboardButton("üÜï –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞", callback_data="new_sale")
        keyboard.add(new_sale_btn)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
                 f"{data['name']} x{data['quantity']} = {data['amount']} —Ä—É–±.\n"
                 f"–û–ø–ª–∞—Ç–∞: {data['payment']}, –°–∫–∏–¥–∫–∞: {discount}",
            reply_markup=keyboard
        )
        del user_states[chat_id]  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}")

# === –ö–æ–º–∞–Ω–¥–∞ /close_shift –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É" ===
@bot.message_handler(func=lambda m: m.text == "üîö –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
def handle_close_shift_button(message):
    close_shift(message)

# === –ö–æ–º–∞–Ω–¥–∞ /open_shift –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É" ===
@bot.message_handler(func=lambda m: m.text == "üîÅ –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É")
def handle_open_shift_button(message):
    chat_id = message.chat.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è
    if chat_id in user_data:
        del user_data[chat_id]

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–º—è –∑–∞–Ω–æ–≤–æ
    bot.send_message(chat_id, "üîÑ –ù–æ–≤–∞—è —Å–º–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Å–Ω–æ–≤–∞.")

    keyboard = telebot.types.InlineKeyboardMarkup()
    for name in EMPLOYEES:
        keyboard.add(telebot.types.InlineKeyboardButton(text=name, callback_data=f"name_{name}"))
    bot.send_message(chat_id, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=keyboard)

# === –ö–æ–º–∞–Ω–¥–∞ /close_shift ===
def close_shift(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    employee = user_data[chat_id]["employee"]
    today = datetime.now().strftime("%Y-%m-%d")

    try:
        worksheet, _ = connect_sheet()
        records = worksheet.get_all_records()

        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
        plan_cell = worksheet.acell(PLAN_CELL).value
        plan = float(plan_cell.replace(" ", "").replace(",", ".")) if plan_cell and plan_cell.isdigit() else 0

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –∏–º–µ–Ω–∏
        today_sales = [r for r in records if r[DATE_COLUMN] == today and r["–ò–º—è"] == employee]

        if not today_sales:
            bot.reply_to(message, "‚ö†Ô∏è –ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return

        total_sales = sum(int(r[CASH_COLUMN]) for r in today_sales)
        percent_complete = (total_sales / plan * 100) if plan > 0 else 0

        payment_types = {}
        categories = {}

        for r in today_sales:
            payment_types[r[PAYMENT_COLUMN]] = payment_types.get(r[PAYMENT_COLUMN], 0) + int(r[CASH_COLUMN])
            categories[r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]] = categories.get(r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], 0) + int(r["–ö–æ–ª-–≤–æ"])

        report = (
            f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã: {employee}\n"
            f"üìÖ –î–∞—Ç–∞: {today}\n"
            f"üì¶ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(today_sales)} —à—Ç.\n"
            f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_sales} —Ä—É–±.\n\n"
            f"üéØ –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å: {plan} —Ä—É–±.\n"
            f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {percent_complete:.1f}%\n\n"
            f"üí≥ –ü–æ —Ñ–æ—Ä–º–µ –æ–ø–ª–∞—Ç—ã:\n"
        )

        for pay_type, amount in payment_types.items():
            report += f"- {pay_type}: {amount} —Ä—É–±.\n"

        report += "\nüßæ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:\n"
        for category, count in categories.items():
            report += f"- {category}: {count} —à—Ç.\n"

        bot.reply_to(message, report)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è" ===
@bot.message_handler(func=lambda m: m.text == "üí∞ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è")
def handle_cash_out_button(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    user_states[chat_id] = {
        "step": "inc_reason",
        "data": {"type": "incassation"}
    }
    bot.send_message(chat_id, "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:")

# === –®–∞–≥ 1: –ü—Ä–∏—á–∏–Ω–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ ===
@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "inc_reason")
def handle_inc_reason(message):
    chat_id = message.chat.id
    reason = message.text.strip()
    user_states[chat_id]["data"]["reason"] = reason
    user_states[chat_id]["step"] = "inc_amount"
    bot.send_message(chat_id, "üî¢ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:")

# === –®–∞–≥ 2: –°—É–º–º–∞ –∏–Ω–∫–∞—Å—Å–∞—Ü–∏–∏ ===
@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "inc_amount")
def handle_inc_amount(message):
    chat_id = message.chat.id
    try:
        amount = int(message.text.strip())
        data = user_states[chat_id]["data"]
        employee = user_data[chat_id]["employee"]
        time = datetime.now().strftime("%H:%M")
        date = datetime.now().strftime("%Y-%m-%d")

        if amount <= 0:
            bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        if user_data[chat_id]["cash"] < amount:
            bot.reply_to(message, "‚ùå –í –∫–∞—Å—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Å—É
        user_data[chat_id]["cash"] -= amount

        worksheet, _ = connect_sheet()
        worksheet.append_row([
            date, time, employee, "–ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è", data["reason"], 0, -amount, "–ù–∞–ª–∏—á–∫–∞", "-"
        ])
        worksheet.update(CASH_REGISTER_CELL, [[str(user_data[chat_id]["cash"])]])  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        bot.send_message(chat_id, f"‚úÖ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞: {amount} —Ä—É–±.\n"
                                  f"–û—Å—Ç–∞–ª–æ—Å—å –≤ –∫–∞—Å—Å–µ: {user_data[chat_id]['cash']} —Ä—É–±.")
        del user_states[chat_id]

    except ValueError:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
